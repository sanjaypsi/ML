import time
import numpy as np
import cv2
import pyautogui
import os
import getpass
from pynput import mouse, keyboard
from datetime import datetime, timedelta
import threading
from skimage.metrics import structural_similarity as ssim
import pystray
from PIL import Image, ImageDraw
import connect_to_db  # MongoDB connection module

class InactivityDetector:
    def __init__(self, total_runtime=3600, timeout=10, check_interval=5, region=None):
        """Monitors user activity by detecting session state, screen motion, and input events, then logs the data to MongoDB."""
        self.username = getpass.getuser()
        self.db = connect_to_db.MongoDatabase()
        print(f"Connected to MongoDB: {self.db}")

        self.total_runtime = total_runtime
        self.timeout = timeout
        self.check_interval = check_interval

        screen_width, screen_height = pyautogui.size()
        self.region = region if region else (
            int(screen_width * 0.1), int(screen_height * 0.1), 
            int(screen_width * 0.5), int(screen_height * 0.5)
        )

        self.last_activity_time = time.time()
        self.active = True
        self.start_time = time.time()
        self.active_time = 0
        self.inactive_time = 0
        self.last_check_time = self.start_time
        self.last_screenshot = None
        self.running = True

        self.mouse_listener = mouse.Listener(on_move=self.on_activity, on_click=self.on_activity, on_scroll=self.on_activity)
        self.keyboard_listener = keyboard.Listener(on_press=self.on_activity)

    def on_activity(self, *args):
        """Resets inactivity timer when user is active."""
        if not self.active:
            print(f"{datetime.now()} - User is active again.")
        self.active = True
        self.last_activity_time = time.time()

    def take_screenshot(self):
        """Captures a dynamically adjusted portion of the screen."""
        try:
            left, top, width, height = self.region
            screenshot = pyautogui.screenshot(region=(left, top, width, height))
            return screenshot.resize((800, 600))  # Standardize size
        except Exception as e:
            print(f"Screenshot Error: {e}")
            return None

    def compare_screenshots(self, img1, img2, threshold=0.95):
        """Compares two images and detects motion."""
        if img1 is None or img2 is None:
            return True, 0  

        img1_gray = cv2.cvtColor(np.array(img1), cv2.COLOR_RGB2GRAY)
        img2_gray = cv2.cvtColor(np.array(img2), cv2.COLOR_RGB2GRAY)

        score, diff = ssim(img1_gray, img2_gray, full=True)
        diff = (diff * 255).astype("uint8")

        _, thresh = cv2.threshold(diff, 200, 255, cv2.THRESH_BINARY)
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        motion_area = sum(cv2.contourArea(cnt) for cnt in contours)
        total_area = img1_gray.shape[0] * img1_gray.shape[1]
        motion_intensity = (motion_area / total_area) * 100

        return score < threshold, motion_intensity

    def is_user_logged_in(self):
        """Checks if the user is logged in."""
        if os.name == "nt":  # Windows
            return "Active" in os.popen("query session").read()
        else:  # Linux
            return bool(os.popen("who").read().strip())

    def log_activity(self, status, motion_intensity):
        """Stores activity logs in MongoDB."""
        log_entry = {
            "username": self.username,
            "timestamp": datetime.now(),
            "status": status,
            "motion_intensity": motion_intensity,
            "active_time": self.active_time,
            "inactive_time": self.inactive_time
        }
        try:
            self.db.insert_logs(log_entry)
        except Exception as e:
            print(f"Database Error: {e}")

    def monitor(self):
        """Monitors user activity and logs data."""
        self.mouse_listener.start()
        self.keyboard_listener.start()

        try:
            while time.time() - self.start_time < self.total_runtime and self.running:
                if not self.is_user_logged_in():
                    print(f"{datetime.now()} - User logged out. Pausing...")
                    while not self.is_user_logged_in():
                        time.sleep(5)
                    print(f"{datetime.now()} - User logged in. Resuming...")
                    self.last_activity_time = time.time()

                time_since_last_activity = time.time() - self.last_activity_time
                new_screenshot = self.take_screenshot()
                motion_detected, motion_intensity = self.compare_screenshots(self.last_screenshot, new_screenshot)
                self.last_screenshot = new_screenshot

                if motion_detected:
                    self.on_activity()

                elapsed = time.time() - self.last_check_time
                self.last_check_time = time.time()

                if time_since_last_activity <= self.timeout:
                    self.active_time += elapsed
                    self.active = True
                    status = "Active"
                else:
                    self.inactive_time += elapsed
                    self.active = False
                    status = "Inactive"

                self.log_activity(status, motion_intensity)
                print(f"{datetime.now()} - User is {status} (Motion: {motion_intensity:.2f}%)")

                time.sleep(self.check_interval)

        except KeyboardInterrupt:
            print("Stopping inactivity detector.")
        finally:
            self.mouse_listener.stop()
            self.keyboard_listener.stop()
            self.print_final_summary()

    def print_final_summary(self):
        """Prints a summary of tracked activity."""
        total_time = self.active_time + self.inactive_time
        if total_time > self.total_runtime:
            self.active_time = (self.active_time / total_time) * self.total_runtime
            self.inactive_time = self.total_runtime - self.active_time
        elif total_time < self.total_runtime:
            self.inactive_time += self.total_runtime - total_time

        print(f"\nSummary:\n"
              f"Total Time Tracked: {timedelta(seconds=int(self.total_runtime))}\n"
              f"Active Time: {timedelta(seconds=int(self.active_time))} ({(self.active_time / self.total_runtime) * 100:.2f}%)\n"
              f"Inactive Time: {timedelta(seconds=int(self.inactive_time))} ({(self.inactive_time / self.total_runtime) * 100:.2f}%)\n")

        summary = {
            "username": self.username,
            "session_end": datetime.now(),
            "total_runtime": self.total_runtime,
            "active_time": self.active_time,
            "inactive_time": self.inactive_time,
            "total_time": total_time,
            "active_duration": str(timedelta(seconds=int(self.active_time))),
            "inactive_duration": str(timedelta(seconds=int(self.inactive_time)))
        }

        try:
            self.db.insert_summary(summary)
        except Exception as e:
            print(f"Database Error: {e}")


    def create_icon(self):
        """Creates a system tray icon to show activity status."""
        self.icon = pystray.Icon("inactivity_detector", self.create_icon_image())
        threading.Thread(target=self.update_tray_time, daemon=True).start()
        self.icon.run()

    def create_icon_image(self):
        """Generates a simple system tray icon."""
        image = Image.new("RGB", (64, 64), (0, 128, 255))
        draw = ImageDraw.Draw(image)
        draw.rectangle((10, 10, 54, 54), fill=(255, 255, 255))
        return image

    def update_tray_time(self):
        """Updates system tray tooltip with active/inactive time."""
        while self.running:
            elapsed_active = timedelta(seconds=int(self.active_time))
            elapsed_inactive = timedelta(seconds=int(self.inactive_time))
            self.icon.title = f"Active: {elapsed_active} | Inactive: {elapsed_inactive}"
            time.sleep(5)

if __name__ == "__main__":
    detector = InactivityDetector(total_runtime=300, timeout=30, check_interval=10)
    monitor_thread = threading.Thread(target=detector.monitor)
    monitor_thread.start()
    detector.create_icon()
